1) composer create-project laravel/laravel 'your project name'  ---- command to create laravel project.

2) npm install --- to install all dependency and laravel mix

3) composer require laravel/ui  --dev  ------ this installs all ui commands

4) php artisan ui vue --auth    ----- this installs all auth related views and controller files with vuejs support

5) php artisan migrate    ---- this will migrate all the DB table to mysql database
before this goto config/database change to utf8

6) php artisan migrate:fresh    ---- rollback and migrate DB

7) php artisan serve    ------- to run the project

8) git init

9) git add .

10) git commit -m''

11) $ git remote add origin https://github.com/sujayverma/laravel-qa.git

12) $ git branch -M master

13) $ git push -u origin master

14) git branch 

15) git checkout -b database

16) php artisan make:model Question -m   --------- creates model along with migrattion
now make changes to the new migratgration file add new columns and relations

17) run php artisan migrate    ------ to create questions table in the DB.

18) Create relationship between user and question model. 

19) Git commit and push code git push origin database

20) Git checkout to master

21) Git merge database branch

22) Create a question model factory  ----- purpose is to fill DB table with fake data.

23) Open terminal and php artisan tinker
User::factory()->count(3)->create() ------ this will create 3 fake users in the DB.

24) Open seeder file and add code for generating fake data.
User::factory(3)->create()->each(function($u){
    $u->questions()
    ->saveMany(
        Question::factory(rand(1,5))->make()
    );
});

----------- this will create fake users and questions.
now in terminal run php artisan migrate:fresh --seed     -------- this will drop and then create tables in Db with fake data.

25) Create a new branch for this lesson 
git checkout -b leasson-4

26) Open web routes and add resource route for questions controller.

27) in cmd php artisan make:controller QuestionsController --resource --model=Question
create views for questions and show the question and pagination
for laravel 8 install bootstrap UI using  ---php artisan ui bootstrap ---npm install && npm run dev
also use php artisan vendor:publish --tag=laravel-pagination  ------ this help in getting pagination styling

now git push code to branch
28) Create a branch lesson-5 use git checkout -b lesson-5

29) Add link to title and show author of the question and created at timings value in view blade page.
Now set this accesor value in Model using getAttribute method.

30) Now how do we check what are the sql queries running to get all this questions? 
to check we need to install a package and this package will be used only in development
option 1 ---composer require barryvdh/laravel-debugbar --dev   ------the package to check sql queries that are running.
option 2 --- use of DB facades as used in the question controller.
Now when we check the querylog we find N+1 query is running using eloquent. To solve this issue we need to use WITH in
eloquent as used in question controller.

31) Time add votes, answer and view counter. Let create a branch git checkout -b lesson-6
Open resource sass folder create css variable also add css to app.sass file. compile the sass into css by using Command
npm run dev or npm run watch
Add votes, answers and views value in view page. Create a accessor in model file to update the css class as per value.
Done.
Git add. git commit -m '' git push origin lesson-6 git checkout master git merge lesson-6 git push origin master

32) For lesson 7 lets create a branch lesson-7 git checkout -b lesson-7
In this lesson we learnt how to create a form and add error message divs also added @csrf token in form.
then git push and merge process.

33) For lesson 8 we added validation to form. Corrected issue with fillable in question model. And saved value to DB
from the form. Added a _message.blade for layout to show success message in question index templete. Learnt how to add
or create new Request for form validation. ----- php artisan make:Request AskQuestionRequest
then git push and merge process.

34) Create new branch git checkout -b lesson-9
in this lesson we learn how to update a form data. For this we create a different templete for form. Included this form
in create and edit templete. Passed a hidden PUT method in form using method_field() then in controller update method
updated the DB. lesson done next git push and merge. 

35) Create a branch lesson-10
Use the destroy route to delte the question. by crating a form use submit button in the form.
Git add push and merge.

36) Create a branch
In this lesson we learnt how to remove a route from resource route list and how to add a custom route for show with slugs.
Had to update RouteServiceProvider boot fucntion had to bind a method for question slugs.
Installed parsedown to show html in proper way. https://github.com/parsedown/laravel
git add commit push

35) Use Gate for authorization permission of question edit and delete.
Add & define gate in AuthServiceProvider use Support Fascade gate classes on both service provider and controller.
Use allow or denies function for the task. Use CAN in view to hide edit and delete for unauthorized users.
Git commit and push branch lesson-12-a

36) Use of Policy for authorization permission for question edit and delete. 
php artisan make:policy QuestionPolicy --model=Question  ----- this will create a policy for Question model.
add the user check in policy functions add the model and policy in AuthServiceProvider class.
Use it in controller fucntions for authorization. Use auth middleware to protect create question route.
Use CAN in view to hide edit and delete for unauthorized users.
Git commit push branch lesson-12-b and merge with master.

37) Now we need to create Answers for the Questions. So lets create a branch lesson-13. Create a Model Answer.
php artisan make:model Answer -m
Add all the column names in Answer migrate file.
Now create relation between question and Answer model.
We need to change the column name answers for questions table to do that we need to create
migration file. php artisan make:migration rename_answers_in_questions_table 
to run the migrate we need to install dependency composer require doctrine/dbal
https://laravel.com/docs/8.x/migrations#renaming-and-dropping-tables
Then run php artisan:migrate.
Make changes to columns name answers in Questions model, QuestionPolicy and View File.
git add. 
git commit -m 'message'
git push origin lesson-13
git checkout master
git merge lesson-13
git push origin master

38) We will create fake answers by using factory model.
First create a branch git checkout -b lesson-14.
php artisan make:factory AnswerFactory
Add fields value to defination function in factory class.
For useing ramdom user ids import user model and then use ----User::pluck('id')->random()
Update the database seeds file. 
Eloquent Events: Eloquent Models fire several events, allowing you to hook into the following points
in model's lifecycle:
 i) retrieved: --- This event is fired when the model in retrieved or fetched.
 ii) creating, created  ----- This event is fired when the new model is saved for the first time.
 iii) updating, updated ----- this event is fired when updating a existing model.
 iv) saving, saved      ----- this event is fired on both occasions while saving and updating a Model.
 v) deleting, deleted   ----- this event is fired when existing model is deleted.
 vi) restore, restoring ----- This event is fired when restoring a model.

 Now add a public static boot function to the Answer model. Make a call to parent boot function.
 Now add created hook function to this boot function.
 git add.
 git commit 
 git push origin lesson-14
 git checkout master
 git merge lesson-14
 git push origin master

 39) In this lesson we will show the answers in question view page.
 git checkout -b lesson-15
 Showed all the answers to question in show question page.
 Added design and date time with user name used gravatar.
 git add. and commit merge with master.

 40) We will develop voting design for the question in this lesson
 so, git checkout -b lesson-16
 npm i @fortawesome/fontawesome-free
 added font cdn link in layout file.
 add css in scss file. Used caret-up, caret-down, star and check icon for question and answer.
 git add.
 git commit 
 git push git merge git push
 
 41) We will develop saving answer for question.
 Made changes to question show.blade file made seprate file for showing answers.
 Create a answer folder in views folder and create all crud view files required.
 Added error class to text area field for validation.
 git add.
 git commit
 git push git merge git push

42) Created a new branch lesson-18. we will learn how to update the user answers.
Add update and delete button to answer index blade.
create a new policy for edit and delete button for answers.
php artisan make:policy AnswerPolicy --model=Answer
add code to update delete function use @can in view to show the 2 buttons. 
use authorize function in answercontroller and add edit and update code.
git add . git commit git push git checkout git merge git push

43) Created a new branch lesson-19. In this we will learn how to delete answers.
added delete functionality to answer controller and model.

44) Created a new branch lesson-20. In this we will learn how to mark the best answer.

45) Created a new branch lesson-21. In this lesson we will learn how to favorite a question.
To determine the relation between users questions we will create a table 'favorites'
in this table we will have many to many relationship.
Here we create 2 seeder files to add dummy data in DB UserQuestionAnswerTableSeeder File and FavoritesTableSeeder file.
Add code to it. run the seed file using php artisan.
php artisan db:seed --class=FavoritesTableSeeder
Now we will create a frontend action for favoriting and unfavorite a question.
For this task lets add new routes to web.php.
Made controller Favorites add code to controller & view and question model.
git add git commit  git push git checkout master git merge git push

46) Created a new branch lesson-22
In this lesson we will implement vote up and vote down for question and answers both.
We will use many to many polymorphic relationship for this task. We create only a single table to store the values.
We will add all the relation functions in User, Question and Answer model. Have to rename votes the column name in question table to votes_count.
php artisan make:migration rename_votes_on_questions_table --table=questions
open tinker
php artisan tinker
$q1 = App\Models\Question::find(1); // This will assign id 1 value from Questions table to $q1.
$q2 = App\Models\Question::find(2);
$u2 = App\Models\User::find(2);
$u1 = App\Models\User::find(1);
$a1 = $q1->answers->first(); // This will assign first answer to question id 1 to $a1.
$a2 = $q2->answers->first();
$u1->voteQuestions()->attach($q1, ['vote' => 1]); // This will add vote to question id 1 by user id 1.
$u1->voteQuestions()->where('votable_id', $q1->id)->exists(); // This will return boolean. It checks if the user id 1 has voted question id 1 or not.
$u1->voteQuestions;  // This will return user id 1 votes to all questions
$u2->voteQuestions()->attach($q1, ['vote' => -1]) // Negitive voting a question.
$u1->voteAnswers()->attach($a1, ['vote' => 1]).  // user id 1 voting answer of question 1.
$u1->voteAnswers()->updateExistingPivot($a1, ['vote' => -1]) // This updates user id 1 vote to answer to the first question.
$q1->vote; // this will return all the votes for question id 1 but this doesn't return vote column value.
$a1->vote;
$q1->vote()->withPivot('vote')->get(); // This will return with vote column values.
$q1->vote()->wherePivot('vote', -1)->count(); // This will return number of Negitivevotes to question id 1.
$q1->vote()->wherePivot('vote', -1)->sum('vote'); //This will sum up all the Negitive votes to question id 1.
Now add a function to user model to save user vote for questions. voteTheQuestion all logic to store values.
Make a seeder to store random fake votes in DB.
php artisan make:seeder VotablesTableSeeder   // This will create seeders.
php artisan db:seed --class=VotablesTableSeeder   // Run the seeder file.
Now make a controller for voteQuestions.
php artisan make:controller VoteQuestionController   // Make controller.
php artisan make:controller VoteAnswerController   // Make controller.
Add routes.
Add code for upvote and down vote in User model.
Add form to view page.
Git ad commit and push.

47) Created a lesson-23 branch for refactoring the model code. We will use DRY(Dont repeat yourself) principle for
code refactoring.
We will changes in User model functions voteTheQuestion and voteTheAnswer and write a private method and place the common code in it.
Then we will use Traits we will create a VotableTrait place the vote relationship, upVote & downVote method in this trait.
And remove this functions from Question and Answer model.
git add, git commit, git push, git merge & push  

48) Created a lesson-24 branch for refactoring the view code with DRY principle.

49) Created a lesson-25 branch for showing excerpt in question index and removing script tags from question body content.
Installed a Purifier package to clean question body and answer body from mailocus code.
package used https://github.com/mewebstudio/Purifier 
Purifier::clean(Input::get('inputname'));

50) Created branch lesson-26. In this branch we will remove the default laravel homepage.
Show answers order by vote counts. Remove answer templete when on answer to a question.
Show a alert when no question.

51) Created branch lesson-27. In this branch we will tidy up our view so that we can integrate vuejs easily.
We will create a child view for answers and questions index page.
Used or Activated bootstrap pagination. By calling a paginator method inside serviceProvder class.
Please check https://impulsivecode.com/laravel-8-pagination-example-with-bootstrap-4/ 
Link to know more.

52) Created branch lesson-28-a. In this branch we will implement vue js views. We will make author details appear using vue component.
Run the following command first to work with vuejs.
i) composer require laravel/ui   ----- will install UI related dependency.
ii) php artisan ui vue    ------ The laravel/ui package has some helpful Artisan commands which will automatically scaffold out everything you need to get started with Vue.
iii) npm install && npm run dev    ----- Install all dependency and compile them.
iv) <script src="{{ mix('/js/app.js') }}"></script>  ---- Use mix to include js file.
v) npm install vue-loader@^15.9.7 --save-dev --legacy-peer-deps  ----- will install vuejs loader.
vi) npm update vue-loader  ----- this will update the vue loader.
vii) npm audit fix ----- to fix other library issue.
viii) npm run watch ----- And we are good to go. 
We will show author details for question and answers using vue js components.
so first run npm i vue-loader --- to install vue js loader. Make changes to webpack.mix.js use vue function.
create a Userinfo component for author details. Include the component in app.js. append protected accesor in model
to access data in vue component.

53) Created branch lesson-29. In this branch we will learn inline templating using vue js component.
We will created answer component and even display edit form in SPA.
Added edit form in same page. Added validation for blank form. Used binding for disabling the update button.
Showed alert message aswell.

54) Created branch 30. In this branch we learn to implement vuejs to delete button for the answers.

55) Created branch 31. In this branch we learn to use iztoast plugin. To show alert message in a better way.
Used iztoast for edit and delete but jquery not working for delete.
